#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('Callbaseleadgen:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

var ssl_options = {
    key: fs.readFileSync('./psx-io.key'),
    cert: fs.readFileSync('./764e7555cceae595.crt'),
    ca: fs.readFileSync('./gd_bundle-g2-g1.crt')
};

http.globalAgent.maxSockets = 50;
https.globalAgent.maxSockets = 50;

var httpServer = http.createServer(app);
var secureServer = https.createServer(ssl_options, app);


/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(process.env.PORT || '8000');
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
//app.set('httpsPort', port);

/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.listen(httpPort);
secureServer.listen(port);
secureServer.on('error', onError);
secureServer.on('listening', onListening);
console.log("httpServer running on port : " + httpPort);
console.log("secureServer running on port : " + port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP secureServer "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP secureServer "listening" event.
 */

function onListening() {
    var addr = secureServer.address();
    var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
    debug('Listening on ' + bind);
}